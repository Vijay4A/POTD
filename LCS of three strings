class Solution
{
    public:
        
        int solveUsingRe(int i,int j,int k,string&s1,string&s2,string&s3,int n1,int n2,int n3,vector<vector<vector<int>>>&dp){
            if(i>=n1||j>=n2||k>=n3) return 0;
            if(dp[i][j][k]!=-1) return dp[i][j][k];
            if(s1[i]==s2[j]&&s2[j]==s3[k]){
                return 1+solveUsingRe(i+1,j+1,k+1,s1,s2,s3,n1,n2,n3,dp);
            }
            int a= solveUsingRe(i+1,j,k,s1,s2,s3,n1,n2,n3,dp);
            int b= solveUsingRe(i,j+1,k,s1,s2,s3,n1,n2,n3,dp);
            int c= solveUsingRe(i,j,k+1,s1,s2,s3,n1,n2,n3,dp);
            
            return dp[i][j][k]=max({a,b,c});
            
        }
        int tabulation(string&s1,string&s2,string&s3,int n1,int n2,int n3){
            vector<vector<vector<int>>>dp(n1+1,vector<vector<int>>(n2+1,vector<int>(n3+1,0)));
            for(int i=n1-1;i>=0;i--){
                for(int j=n2-1;j>=0;j--){
                    for(int k=n3-1;k>=0;k--){
                        int result=0;
                         if(s1[i]==s2[j]&&s2[j]==s3[k])
                        result=max(result,1+dp[i+1][j+1][k+1]);
                    int a= dp[i+1][j][k];
                    int b= dp[i][j+1][k];
                    int c= dp[i][j][k+1];
                   dp[i][j][k]=max({result,a,b,c});
                        
                    }
                }
            }
            return dp[0][0][0];
        }
        int spaceOptimisation(string&s1,string&s2,string&s3,int n1,int n2,int n3){
        vector<vector<int>>curr(n2+1,vector<int>(n3+1,0));
        vector<vector<int>>next(n2+1,vector<int>(n3+1,0));
            for(int i=n1-1;i>=0;i--){
                for(int j=n2-1;j>=0;j--){
                    for(int k=n3-1;k>=0;k--){
                        int result=0;
                         if(s1[i]==s2[j]&&s2[j]==s3[k])
                        result=max(result,1+next[j+1][k+1]);
                    int a= next[j][k];
                    int b= curr[j+1][k];
                    int c= curr[j][k+1];
                   curr[j][k]=max({result,a,b,c});
                        
                    }
                }
                    next=curr;
            }
            return next[0][0];
        }
        int LCSof3 (string A, string B, string C, int n1, int n2, int n3)
        {
            vector<vector<vector<int>>>dp(n1+1,vector<vector<int>>(n2+1,vector<int>(n3+1,-1)));
            // return solveUsingRe(0,0,0,A,B,C,n1,n2,n3,dp);
            // return tabulation(A,B,C,n1,n2,n3);
            return spaceOptimisation(A,B,C,n1,n2,n3); 
        }
};
